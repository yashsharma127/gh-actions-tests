name: Self-hosted Test

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Change dir, chmod and run install.sh
        run: |
          cd ~/test-swarm-setup/TS-EQ-INFRA
          chmod +x ./install.sh
          sudo ./install.sh
      - name: Wait for db-migrator replicas to become 0/1
        run: |
          echo "Waiting for db-migrator replicas to become 0/1..."
          timeout=180  # max wait time in seconds (3 minutes)
          interval=5    # check every 5 seconds

          while [ $timeout -gt 0 ]; do
            replicas=$(docker service ls --filter name=ts-wms_db-migrator --format '{{.Replicas}}')
            
            if [ "$replicas" = "0/1" ]; then
              echo "db-migrator has completed and exited."
              exit 0
            fi

            echo "Still waiting... current replicas: $replicas"
            sleep $interval
            timeout=$((timeout - interval))
          done

          echo "Timeout: db-migrator did not exit within expected time."
          exit 1

  test:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm install
      - name: Cache Playwright Browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-browsers-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-browsers-
      - name: Install Playwright Browsers (if not cached)
        run: |
          if [ ! -d ~/.cache/ms-playwright ]; then
            npx playwright install --with-deps
          fi
      - name: Run Playwright tests
        run: npx playwright test --trace on

  cleanup:
    runs-on: self-hosted
    needs: test
    steps:
      - name: Remove ts-wms docker stack
        run: |
          cd ~/test-swarm-setup/TS-EQ-INFRA
          docker stack rm ts-wms
      - name: Wait for ts-wms services to stop
        run: |
          echo "Waiting for all ts-wms services to be removed..."
          timeout=180  # 3 minutes max
          interval=5

          while [ $timeout -gt 0 ]; do
            count=$(docker ps --filter name=ts-wms_ --format '{{.Names}}' | wc -l)
            if [ "$count" -eq 0 ]; then
              echo "All ts-wms services have been removed."
              exit 0
            fi

            echo "$count services still running..."
            sleep $interval
            timeout=$((timeout - interval))
          done

          echo "Timeout waiting for ts-wms services to stop."
          exit 1
      - name: Remove secrets created for stack setup
        run: |
          docker secret rm $(docker secret ls -q) 2>/dev/null || true
      - name: Remove volumes created for stack setup
        run: |
          echo "Finding ts-wms volumes to remove..."
          volumes=$(docker volume ls -q --filter name=^ts-wms)

          if [ -z "$volumes" ]; then
            echo "No matching volumes found."
            exit 0
          fi

          for vol in $volumes; do
            echo "Trying to remove volume: $vol"
            attempt=1
            max_attempts=5
            while [ $attempt -le $max_attempts ]; do
              docker volume rm "$vol" >/dev/null 2>&1 && break
              echo "Attempt $attempt failed — volume $vol might still be in use. Retrying..."
              sleep 3
              attempt=$((attempt + 1))
            done

            # Final check
            if docker volume ls -q --filter name="^$vol$" | grep -q "$vol"; then
              echo "❌ Failed to remove volume: $vol"
            else
              echo "✅ Successfully removed volume: $vol"
            fi
          done
